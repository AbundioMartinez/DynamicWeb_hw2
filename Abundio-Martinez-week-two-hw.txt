Abundio MartinezPart 21.)HTML:<div class="form">  <fieldset>    <label>Number 3:</label>    <input type="text" id="num3">  </fieldset>  <fieldset>    <label>Number 4:</label>    <input type="text" id="num4">  </fieldset>  <fieldset>    <button id="multiply" onclick="multiplyNums()">Click to Multiply</button>    <h3>Result</h3>    <span id="result2">Result here</span>  </fieldset></div>JavaScript:const multiplyNums = () => {    let num3 = document.getElementById("num3").value;    let num4 = document.getElementById("num4").value;    let multiply = num3 * num4;    document.getElementById("result2").innerHTML = multiply;};we declare const and assign the anonymous arrow function. Inside the anonymous arrow function,we declare the variable “let num1” and assign the “document.getElementById(“num1”).value.”- .value is the value attribute from the input tag.- Input tagÕs value attribute provided by the user in the input field.- innerHTML / ÒResult HereÓ to the sum of the multiplyNums function.- The function keyword in this code is multiplyNums()- getElementById gets the element with the specific ID and returns the ID attribute with the specified value.2.) Var value is not valid because it says itÕs reserved.	$ JavaScript identifiers are valid. It is identified as an object.	Letters are valid identifier.            Alert_me= doesn’t work3.) var j=4{var j=9}console.log(j)Result 9. Var was reassigned and the result was 9. I tried many times and it always printed the last assign value. Let y=4{let y=2}console.log(y)Result 4. Let wasn’t reassigned. I tried many times and the result was always the first assign value.Const first=5{const first=6}console.log(name)Result 5. Const wasn’t reassigned. It always printed the first assign value.4.) Global scopes are available everywhere in the javascript code including functions. When a variableis declared outside a function, they are global. Any variable that is undeclared is considered global.Any variable that is undeclared is considered global.var global = 10; function fun (){var local = 5;}       - var global   <-- variables declared Globally.      - var local  <-- local function scope.let x = 1;{let x = 2;console.log(x);}console.log(x);	- let x = 1 <-- global         {       - let x = 2 <-- local- console.log(x) = <-- 2 }- console.log(x) = <-- 1